// NOTE! You need to set up PPJoy with 4 virtual Joysticks! - Carl

// Joystick/Mouse script using IR sensor (Up to 4 Wiimotes Supported v2.1)
// Designed for use with MAME as a lightgun replacement
// by Lukeage
//
// Thanks to Carl Kenner for GlovePIE and help with the battery
//
// Requires PPJoy to work with the joystick!
//
// This script allows you to utilise both the mouse cursor and a joystick by
// switching between them using the 1 (mouse) and 2 (joystick) buttons on the
// Wiimote. By default, the joystick is set. To use as a lightgun in mame, you
// need to set it up to use a joystick as a lightgun. Setting it to the mouse
// does not work as GlovePIE cannot modify RawImput yet.
//
// Both Modes:
//
// Direction pad is mapped to the direction keys
// - and + together display the battery level on the LEDs
// LEDs indicate the number of the wiimote connected
// 1 = Mouse Mode
// 2 = Joystick Mode
// 1 and 2 displays the values needed for calibration when the Wiimote is sat on
// a flat surface (var.Wiimote1.xcal, var.Wiimote1.ycal, var.Wiimote1.zcal).
//
// Mouse Mode:
//
// B = Left Mouse Button
// A = Right Mouse Button
// - = Volume Down
// Home = Mute
// + = Volume Up
//
// Joystick Mode:
//
// B = Button 1 (this causes the Wiimote to rumble)
// A = Button 2
// - = Button 3
// Home = Button 4
// + = Button 5
//
// To add extra Wiimotes, There are a few things you need to add.
//
// 1) var.WiimoteX = X needs to be added (Where X is the new Wiimote number).
//    This is only used to display the correct and obviously is useless after
//    the 4th Wiimote
// 2) The Wiimote Variables need to be duplicated. In this script any extra
//    Wiimotes (2 onwards) are just set to match the first Wiimote
// 3) The Entire Wiimote code needs to be copied for each extra Wiimote.
// 4) In both the Wiimote variables and code, Wiimote1 needs to be replaced
//    with WiimoteX.
// 5) ppjoy1 needs to be replaced with ppjoyX.
// 6) mouse needs to be replaced with CursorX if the extra cursor is required.
//
// Updates:
//
// * Fixed battery indicatory, will be updated every 30s
// * Fixed 2-4 Wiimote paramaters, had them all set incorrectly


// General Variables

// Wiimote Orientation
var.Wiimote.Up = 1
var.Wiimote.Right = 2
var.Wiimote.Down = 3
var.Wiimote.Left = 4

// These values are used to make it easy to add any addition Wiimotes. If you
// need to add Wiimotes, just make the new line equals of number of the Wiimote
var.Wiimote1 = 1
var.Wiimote2 = 2
var.Wiimote3 = 3
var.Wiimote4 = 4

// Wiimote Settings

// Wiimote 1 Variables

// Used to change the angle at which the Wiimote direction is detected
var.Wiimote1.Rotation = 7

// You can scale the movement to either speed up the movement or allow for
// better coverage near the edges of the screen
var.Wiimote1.ScaleX = 1.1
var.Wiimote1.ScaleY = 1.1

// Number of pixels the pointer has to move before it is updated
var.Wiimote1.Deadzone = 5

//Adjust these to calibrate your remote
var.Wiimote1.xcal = 3
var.Wiimote1.ycal = -30
var.Wiimote1.zcal = 3

// Only required for addition Wiimotes
//if Wiimote1.Exists then
//  mouse.visible = true
//endif

// Wiimote 2 Variables

// Used to change the angle at which the Wiimote direction is detected
var.Wiimote2.Rotation = var.Wiimote1.Rotation

// You can scale the movement to either speed up the movement or allow for
// better coverage near the edges of the screen
var.Wiimote2.ScaleX = var.Wiimote1.ScaleX
var.Wiimote2.ScaleY = var.Wiimote1.ScaleY

// Number of pixels the pointer has to move before it is updated
var.Wiimote2.Deadzone = var.Wiimote1.Deadzone

//Adjust these to calibrate your remote
var.Wiimote2.xcal = var.Wiimote1.xcal
var.Wiimote2.ycal = var.Wiimote1.ycal
var.Wiimote2.zcal = var.Wiimote1.zcal

if Wiimote2.Exists then
  Cursor2.visible = true
endif

// Wiimote 3 Variables

// Used to change the angle at which the Wiimote direction is detected
var.Wiimote3.Rotation = var.Wiimote1.Rotation

// You can scale the movement to either speed up the movement or allow for
// better coverage near the edges of the screen
var.Wiimote3.ScaleX = var.Wiimote1.ScaleX
var.Wiimote3.ScaleY = var.Wiimote1.ScaleY

// Number of pixels the pointer has to move before it is updated
var.Wiimote3.Deadzone = var.Wiimote1.Deadzone

//Adjust these to calibrate your remote
var.Wiimote3.xcal = var.Wiimote1.xcal
var.Wiimote3.ycal = var.Wiimote1.ycal
var.Wiimote3.zcal = var.Wiimote1.zcal

if Wiimote3.Exists then
  Cursor3.visible = true
endif

// Wiimote 4 Variables

// Used to change the angle at which the Wiimote direction is detected
var.Wiimote4.Rotation = 7

// You can scale the movement to either speed up the movement or allow for
// better coverage near the edges of the screen
var.Wiimote4.ScaleX = var.Wiimote1.ScaleX
var.Wiimote4.ScaleY = var.Wiimote1.ScaleY

// Number of pixels the pointer has to move before it is updated
var.Wiimote4.Deadzone = var.Wiimote1.Deadzone

//Adjust these to calibrate your remote
var.Wiimote4.xcal = var.Wiimote1.xcal
var.Wiimote4.ycal = var.Wiimote1.ycal
var.Wiimote4.zcal = var.Wiimote1.zcal

if Wiimote4.Exists then
  Cursor4.visible = true
endif

// Wiimote Control

// Wiimote 1 Code

// Debug code
if Wiimote1.One and Wiimote1.Two then
   debug = "Wiimote1 X: " + Wiimote1.RawForceX * -1 + " Wiimote1 Y: " + Wiimote1.RawForceY * -1 + " Wiimote1 Z: " + Wiimote1.RawForceZ * -1
endif

// Update battery status every 30s - Thanks to Carl Kenner
if true then
   wait 30s
   Wiimote1.Report15 = 4 | int(Wiimote1.Rumble)
endif

// Show battery meter
if Wiimote1.Minus & Wiimote1.Plus then
   Wiimote1.Leds = 2 ^ ceil(Wiimote1.Battery / 48) - 1 // I assume the max battery value to be 192
else
    // Display which Wiimote is which
   Wiimote1.Leds = 2 ^ (var.Wiimote1 - 1)
endif

// Set the D-Pad to function as the Arrow Keys
if Wiimote1.Up
  Up = True
else
  Up = False
endif

if Wiimote1.Down
  Down = True
else
  Down = False
endif

if Wiimote1.Left
  Left = True
else
  Left = False
endif

if Wiimote1.Right
  Right = True
else
  Right = False
endif

// Set if mouse mode (1) or joystick mode (0)
if Wiimote1.One Then
   var.Wiimote1.Mode = 1
endif

if Wiimote1.Two Then
   var.Wiimote1.Mode = 0
endif

// Calibrate settings
var.Wiimote1.ForceX = Wiimote1.RawForceX + var.Wiimote1.xcal
var.Wiimote1.ForceY = Wiimote1.RawForceY + var.Wiimote1.ycal
var.Wiimote1.ForceZ = Wiimote1.RawForceZ + var.Wiimote1.zcal

// Find Orientation
if var.Wiimote1.ForceY > var.Wiimote1.ycal + var.Rotation then
   var.Wiimote1.Orientation = var.Wiimote.Up
elseif var.Wiimote1.ForceY < var.Wiimote1.ycal - var.Rotation then
   var.Wiimote1.Orientation = var.Wiimote.Down
else
   if var.Wiimote1.ForceX > 0 then
      var.Wiimote1.Orientation = var.Wiimote.Left
   else
      var.Wiimote1.Orientation = var.Wiimote.Right
   endif
endif

// Get absolute screen position
if var.Wiimote1.Orientation == var.Wiimote.Up then
   var.Wiimote1.X = (1024 - ((Wiimote1.Dot1x + Wiimote1.Dot2x) / 2)) / 1024 * Screen.DesktopWidth
   var.Wiimote1.Y = ((Wiimote1.Dot1y + Wiimote1.Dot2y) / 2) / 768 * Screen.DesktopHeight
elseif var.Wiimote1.Orientation == var.Wiimote.Down then
   var.Wiimote1.X = (Wiimote1.Dot1x + Wiimote1.Dot2x) / 2 / 1024 * Screen.DesktopWidth
   var.Wiimote1.Y = (768 - ((Wiimote1.Dot1y + Wiimote1.Dot2y) / 2)) / 768 * Screen.DesktopHeight
elseif var.Wiimote1.Orientation == var.Wiimote.Left then
   var.Wiimote1.X = (Wiimote1.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote1.Y = (Wiimote1.Dot1x + Wiimote1.Dot2x) / 2 / 1024 * Screen.DesktopHeight
else
   var.Wiimote1.X = (768 - Wiimote1.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote1.Y = (1024 - ((Wiimote1.Dot1x + Wiimote1.Dot2x) / 2)) / 1024 * Screen.DesktopHeight
endif

if var.Wiimote1.Mode then
   // Mouse Buttons
   mouse.LeftButton = Wiimote1.B
   mouse.RightButton = Wiimote1.B
   VolumeDown = Wiimote1.Minus
   VolumeUp = Wiimote1.Plus
   Mute = Wiimote1.Home

   // Set cursor
   if abs(mouse.CursorPosX - var.Wiimote1.X) > var.Wiimote1.Deadzone then
      mouse.CursorPosX = (var.Wiimote1.X - (Screen.DesktopWidth /2)) * var.Wiimote1.ScaleX + (Screen.DesktopWidth / 2)
   endif

   if abs(mouse.CursorPosY - var.Wiimote1.Y) > var.Wiimote1.Deadzone then
     mouse.CursorPosY = (var.Wiimote1.Y - (Screen.DesktopHeight /2)) * var.Wiimote1.ScaleY + (Screen.DesktopHeight / 2)
   endif
else
   // Joystick Buttons
   if not Wiimote1.B then
      var.Wiimote1.Pressed = false
      ppjoy1.Digital0 = false
   endif

   // Use this to only rumble once per press (since we are simulating a gun)
   if Wiimote1.B and not var.Wiimote1.Pressed then
      var.Wiimote1.Pressed = true
      Wiimote1.Rumble = true
      ppjoy1.Digital0 = true
      wait 100ms
      Wiimote1.Rumble = false
      ppjoy1.Digital0 = false
   endif

   // Use these to set coin insert and start buttons
   ppjoy1.Digital1 = Wiimote1.A
   ppjoy1.Digital2 = Wiimote1.Minus
   ppjoy1.Digital3 = Wiimote1.Home
   ppjoy1.Digital4 = Wiimote1.Plus

   // Joystick needs to be between  -1 and 1 so we can't use absolute values directly
   if abs(mouse.CursorPosX - var.Wiimote1.X) > var.Wiimote1.Deadzone then
      ppjoy1.Analog0 = (var.Wiimote1.X - (Screen.DesktopWidth /2)) * var.Wiimote1.ScaleX / (Screen.DesktopWidth / 2)
   endif

   if abs(mouse.CursorPosY - var.Wiimote1.Y) > var.Wiimote1.Deadzone then
     ppjoy1.Analog1 = (var.Wiimote1.Y - (Screen.DesktopHeight /2)) * var.Wiimote1.ScaleY / (Screen.DesktopHeight / 2)
   endif
endif

// Wiimote 2 Code

// Debug code
if Wiimote2.One and Wiimote2.Two then
   debug = "Wiimote2 X: " + Wiimote2.RawForceX * -1 + " Wiimote2 Y: " + Wiimote2.RawForceY * -1 + " Wiimote2 Z: " + Wiimote2.RawForceZ * -1
endif

// Update battery status every 30s - Thanks to Carl Kenner
if true then
   wait 30s
   Wiimote2.Report15 = 4 | int(Wiimote2.Rumble)
endif

// Show battery meter
if Wiimote2.Minus & Wiimote2.Plus then
   Wiimote2.Leds = 2 ^ ceil(Wiimote2.Battery / 48) - 1 // I assume the max battery value to be 192
else
    // Display which Wiimote is which
   Wiimote2.Leds = 2 ^ (var.Wiimote2 - 1)
endif

// Set the D-Pad to function as the Arrow Keys
if Wiimote2.Up
  Up = True
else
  Up = False
endif

if Wiimote2.Down
  Down = True
else
  Down = False
endif

if Wiimote2.Left
  Left = True
else
  Left = False
endif

if Wiimote2.Right
  Right = True
else
  Right = False
endif

// Set if mouse mode (1) or joystick mode (0)
if Wiimote2.One Then
   var.Wiimote2.Mode = 1
endif

if Wiimote2.Two Then
   var.Wiimote2.Mode = 0
endif

// Calibrate settings
var.Wiimote2.ForceX = Wiimote2.RawForceX + var.Wiimote2.xcal
var.Wiimote2.ForceY = Wiimote2.RawForceY + var.Wiimote2.ycal
var.Wiimote2.ForceZ = Wiimote2.RawForceZ + var.Wiimote2.zcal

// Find Orientation
if var.Wiimote2.ForceY > var.Wiimote2.ycal + var.Rotation then
   var.Wiimote2.Orientation = var.Wiimote.Up
elseif var.Wiimote2.ForceY < var.Wiimote2.ycal - var.Rotation then
   var.Wiimote2.Orientation = var.Wiimote.Down
else
   if var.Wiimote2.ForceX > 0 then
      var.Wiimote2.Orientation = var.Wiimote.Left
   else
      var.Wiimote2.Orientation = var.Wiimote.Right
   endif
endif

// Get absolute screen position
if var.Wiimote2.Orientation == var.Wiimote.Up then
   var.Wiimote2.X = (1024 - ((Wiimote2.Dot1x + Wiimote2.Dot2x) / 2)) / 1024 * Screen.DesktopWidth
   var.Wiimote2.Y = ((Wiimote2.Dot1y + Wiimote2.Dot2y) / 2) / 768 * Screen.DesktopHeight
elseif var.Wiimote2.Orientation == var.Wiimote.Down then
   var.Wiimote2.X = (Wiimote2.Dot1x + Wiimote2.Dot2x) / 2 / 1024 * Screen.DesktopWidth
   var.Wiimote2.Y = (768 - ((Wiimote2.Dot1y + Wiimote2.Dot2y) / 2)) / 768 * Screen.DesktopHeight
elseif var.Wiimote2.Orientation == var.Wiimote.Left then
   var.Wiimote2.X = (Wiimote2.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote2.Y = (Wiimote2.Dot1x + Wiimote2.Dot2x) / 2 / 1024 * Screen.DesktopHeight
else
   var.Wiimote2.X = (768 - Wiimote2.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote2.Y = (1024 - ((Wiimote2.Dot1x + Wiimote2.Dot2x) / 2)) / 1024 * Screen.DesktopHeight
endif

if var.Wiimote2.Mode then
   // Mouse Buttons
   Cursor2.LeftButton = Wiimote2.B
   Cursor2.RightButton = Wiimote2.B
   VolumeDown = Wiimote2.Minus
   VolumeUp = Wiimote2.Plus
   Mute = Wiimote2.Home

   // Set cursor
   if abs(Cursor2.CursorPosX - var.Wiimote2.X) > var.Wiimote2.Deadzone then
      Cursor2.CursorPosX = (var.Wiimote2.X - (Screen.DesktopWidth /2)) * var.Wiimote2.ScaleX + (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor2.CursorPosY - var.Wiimote2.Y) > var.Wiimote2.Deadzone then
     Cursor2.CursorPosY = (var.Wiimote2.Y - (Screen.DesktopHeight /2)) * var.Wiimote2.ScaleY + (Screen.DesktopHeight / 2)
   endif
else
   // Joystick Buttons
   if not Wiimote2.B then
      var.Wiimote2.Pressed = false
      ppjoy2.Digital0 = false
   endif

   // Use this to only rumble once per press (since we are simulating a gun)
   if Wiimote2.B and not var.Wiimote2.Pressed then
      var.Wiimote2.Pressed = true
      Wiimote2.Rumble = true
      ppjoy2.Digital0 = true
      wait 100ms
      Wiimote2.Rumble = false
      ppjoy2.Digital0 = false
   endif

   // Use these to set coin insert and start buttons
   ppjoy2.Digital1 = Wiimote2.A
   ppjoy2.Digital2 = Wiimote2.Minus
   ppjoy2.Digital3 = Wiimote2.Home
   ppjoy2.Digital4 = Wiimote2.Plus

   // Joystick needs to be between  -1 and 1 so we can't use absolute values directly
   if abs(Cursor2.CursorPosX - var.Wiimote2.X) > var.Wiimote2.Deadzone then
      ppjoy2.Analog0 = (var.Wiimote2.X - (Screen.DesktopWidth /2)) * var.Wiimote2.ScaleX / (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor2.CursorPosY - var.Wiimote2.Y) > var.Wiimote2.Deadzone then
     ppjoy2.Analog1 = (var.Wiimote2.Y - (Screen.DesktopHeight /2)) * var.Wiimote2.ScaleY / (Screen.DesktopHeight / 2)
   endif
endif

// Wiimote 3 Code

// Debug code
if Wiimote3.One and Wiimote3.Two then
   debug = "Wiimote3 X: " + Wiimote3.RawForceX * -1 + " Wiimote3 Y: " + Wiimote3.RawForceY * -1 + " Wiimote3 Z: " + Wiimote3.RawForceZ * -1
endif

// Update battery status every 30s - Thanks to Carl Kenner
if true then
   wait 30s
   Wiimote3.Report15 = 4 | int(Wiimote3.Rumble)
endif

// Show battery meter
if Wiimote3.Minus & Wiimote3.Plus then
   Wiimote3.Leds = 2 ^ ceil(Wiimote3.Battery / 48) - 1 // I assume the max battery value to be 192
else
    // Display which Wiimote is which
   Wiimote3.Leds = 2 ^ (var.Wiimote3 - 1)
endif

// Set the D-Pad to function as the Arrow Keys
if Wiimote3.Up
  Up = True
else
  Up = False
endif

if Wiimote3.Down
  Down = True
else
  Down = False
endif

if Wiimote3.Left
  Left = True
else
  Left = False
endif

if Wiimote3.Right
  Right = True
else
  Right = False
endif

// Set if mouse mode (1) or joystick mode (0)
if Wiimote3.One Then
   var.Wiimote3.Mode = 1
endif

if Wiimote3.Two Then
   var.Wiimote3.Mode = 0
endif

// Calibrate settings
var.Wiimote3.ForceX = Wiimote3.RawForceX + var.Wiimote3.xcal
var.Wiimote3.ForceY = Wiimote3.RawForceY + var.Wiimote3.ycal
var.Wiimote3.ForceZ = Wiimote3.RawForceZ + var.Wiimote3.zcal

// Find Orientation
if var.Wiimote3.ForceY > var.Wiimote3.ycal + var.Rotation then
   var.Wiimote3.Orientation = var.Wiimote.Up
elseif var.Wiimote3.ForceY < var.Wiimote3.ycal - var.Rotation then
   var.Wiimote3.Orientation = var.Wiimote.Down
else
   if var.Wiimote3.ForceX > 0 then
      var.Wiimote3.Orientation = var.Wiimote.Left
   else
      var.Wiimote3.Orientation = var.Wiimote.Right
   endif
endif

// Get absolute screen position
if var.Wiimote3.Orientation == var.Wiimote.Up then
   var.Wiimote3.X = (1024 - ((Wiimote3.Dot1x + Wiimote3.Dot2x) / 2)) / 1024 * Screen.DesktopWidth
   var.Wiimote3.Y = ((Wiimote3.Dot1y + Wiimote3.Dot2y) / 2) / 768 * Screen.DesktopHeight
elseif var.Wiimote3.Orientation == var.Wiimote.Down then
   var.Wiimote3.X = (Wiimote3.Dot1x + Wiimote3.Dot2x) / 2 / 1024 * Screen.DesktopWidth
   var.Wiimote3.Y = (768 - ((Wiimote3.Dot1y + Wiimote3.Dot2y) / 2)) / 768 * Screen.DesktopHeight
elseif var.Wiimote3.Orientation == var.Wiimote.Left then
   var.Wiimote3.X = (Wiimote3.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote3.Y = (Wiimote3.Dot1x + Wiimote3.Dot2x) / 2 / 1024 * Screen.DesktopHeight
else
   var.Wiimote3.X = (768 - Wiimote3.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote3.Y = (1024 - ((Wiimote3.Dot1x + Wiimote3.Dot2x) / 2)) / 1024 * Screen.DesktopHeight
endif

if var.Wiimote3.Mode then
   // Mouse Buttons
   Cursor3.LeftButton = Wiimote3.B
   Cursor3.RightButton = Wiimote3.B
   VolumeDown = Wiimote3.Minus
   VolumeUp = Wiimote3.Plus
   Mute = Wiimote3.Home

   // Set cursor
   if abs(Cursor3.CursorPosX - var.Wiimote3.X) > var.Wiimote3.Deadzone then
      Cursor3.CursorPosX = (var.Wiimote3.X - (Screen.DesktopWidth /2)) * var.Wiimote3.ScaleX + (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor3.CursorPosY - var.Wiimote3.Y) > var.Wiimote3.Deadzone then
     Cursor3.CursorPosY = (var.Wiimote3.Y - (Screen.DesktopHeight /2)) * var.Wiimote3.ScaleY + (Screen.DesktopHeight / 2)
   endif
else
   // Joystick Buttons
   if not Wiimote3.B then
      var.Wiimote3.Pressed = false
      ppjoy3.Digital0 = false
   endif

   // Use this to only rumble once per press (since we are simulating a gun)
   if Wiimote3.B and not var.Wiimote3.Pressed then
      var.Wiimote3.Pressed = true
      Wiimote3.Rumble = true
      ppjoy3.Digital0 = true
      wait 100ms
      Wiimote3.Rumble = false
      ppjoy3.Digital0 = false
   endif

   // Use these to set coin insert and start buttons
   ppjoy3.Digital1 = Wiimote3.A
   ppjoy3.Digital2 = Wiimote3.Minus
   ppjoy3.Digital3 = Wiimote3.Home
   ppjoy3.Digital4 = Wiimote3.Plus

   // Joystick needs to be between  -1 and 1 so we can't use absolute values directly
   if abs(Cursor3.CursorPosX - var.Wiimote3.X) > var.Wiimote3.Deadzone then
      ppjoy3.Analog0 = (var.Wiimote3.X - (Screen.DesktopWidth /2)) * var.Wiimote3.ScaleX / (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor3.CursorPosY - var.Wiimote3.Y) > var.Wiimote3.Deadzone then
     ppjoy3.Analog1 = (var.Wiimote3.Y - (Screen.DesktopHeight /2)) * var.Wiimote3.ScaleY / (Screen.DesktopHeight / 2)
   endif
endif

// Wiimote 4 Code

// Debug code
if Wiimote4.One and Wiimote4.Two then
   debug = "Wiimote4 X: " + Wiimote4.RawForceX * -1 + " Wiimote4 Y: " + Wiimote4.RawForceY * -1 + " Wiimote4 Z: " + Wiimote4.RawForceZ * -1
endif

// Update battery status every 30s - Thanks to Carl Kenner
if true then
   wait 30s
   Wiimote4.Report15 = 4 | int(Wiimote4.Rumble)
endif

// Show battery meter
if Wiimote4.Minus & Wiimote4.Plus then
   Wiimote4.Leds = 2 ^ ceil(Wiimote4.Battery / 48) - 1 // I assume the max battery value to be 192
else
    // Display which Wiimote is which
   Wiimote4.Leds = 2 ^ (var.Wiimote4 - 1)
endif

// Set the D-Pad to function as the Arrow Keys
if Wiimote4.Up
  Up = True
else
  Up = False
endif

if Wiimote4.Down
  Down = True
else
  Down = False
endif

if Wiimote4.Left
  Left = True
else
  Left = False
endif

if Wiimote4.Right
  Right = True
else
  Right = False
endif

// Set if mouse mode (1) or joystick mode (0)
if Wiimote4.One Then
   var.Wiimote4.Mode = 1
endif

if Wiimote4.Two Then
   var.Wiimote4.Mode = 0
endif

// Calibrate settings
var.Wiimote4.ForceX = Wiimote4.RawForceX + var.Wiimote4.xcal
var.Wiimote4.ForceY = Wiimote4.RawForceY + var.Wiimote4.ycal
var.Wiimote4.ForceZ = Wiimote4.RawForceZ + var.Wiimote4.zcal

// Find Orientation
if var.Wiimote4.ForceY > var.Wiimote4.ycal + var.Rotation then
   var.Wiimote4.Orientation = var.Wiimote.Up
elseif var.Wiimote4.ForceY < var.Wiimote4.ycal - var.Rotation then
   var.Wiimote4.Orientation = var.Wiimote.Down
else
   if var.Wiimote4.ForceX > 0 then
      var.Wiimote4.Orientation = var.Wiimote.Left
   else
      var.Wiimote4.Orientation = var.Wiimote.Right
   endif
endif

// Get absolute screen position
if var.Wiimote4.Orientation == var.Wiimote.Up then
   var.Wiimote4.X = (1024 - ((Wiimote4.Dot1x + Wiimote4.Dot2x) / 2)) / 1024 * Screen.DesktopWidth
   var.Wiimote4.Y = ((Wiimote4.Dot1y + Wiimote4.Dot2y) / 2) / 768 * Screen.DesktopHeight
elseif var.Wiimote4.Orientation == var.Wiimote.Down then
   var.Wiimote4.X = (Wiimote4.Dot1x + Wiimote4.Dot2x) / 2 / 1024 * Screen.DesktopWidth
   var.Wiimote4.Y = (768 - ((Wiimote4.Dot1y + Wiimote4.Dot2y) / 2)) / 768 * Screen.DesktopHeight
elseif var.Wiimote4.Orientation == var.Wiimote.Left then
   var.Wiimote4.X = (Wiimote4.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote4.Y = (Wiimote4.Dot1x + Wiimote4.Dot2x) / 2 / 1024 * Screen.DesktopHeight
else
   var.Wiimote4.X = (768 - Wiimote4.Dot1y) / 768 * Screen.DesktopWidth
   var.Wiimote4.Y = (1024 - ((Wiimote4.Dot1x + Wiimote4.Dot2x) / 2)) / 1024 * Screen.DesktopHeight
endif

if var.Wiimote4.Mode then
   // Mouse Buttons
   Cursor4.LeftButton = Wiimote4.B
   Cursor4.RightButton = Wiimote4.B
   VolumeDown = Wiimote4.Minus
   VolumeUp = Wiimote4.Plus
   Mute = Wiimote4.Home

   // Set cursor
   if abs(Cursor4.CursorPosX - var.Wiimote4.X) > var.Wiimote4.Deadzone then
      Cursor4.CursorPosX = (var.Wiimote4.X - (Screen.DesktopWidth /2)) * var.Wiimote4.ScaleX + (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor4.CursorPosY - var.Wiimote4.Y) > var.Wiimote4.Deadzone then
     Cursor4.CursorPosY = (var.Wiimote4.Y - (Screen.DesktopHeight /2)) * var.Wiimote4.ScaleY + (Screen.DesktopHeight / 2)
   endif
else
   // Joystick Buttons
   if not Wiimote4.B then
      var.Wiimote4.Pressed = false
      ppjoy4.Digital0 = false
   endif

   // Use this to only rumble once per press (since we are simulating a gun)
   if Wiimote4.B and not var.Wiimote4.Pressed then
      var.Wiimote4.Pressed = true
      Wiimote4.Rumble = true
      ppjoy4.Digital0 = true
      wait 100ms
      Wiimote4.Rumble = false
      ppjoy4.Digital0 = false
   endif

   // Use these to set coin insert and start buttons
   ppjoy4.Digital1 = Wiimote4.A
   ppjoy4.Digital2 = Wiimote4.Minus
   ppjoy4.Digital3 = Wiimote4.Home
   ppjoy4.Digital4 = Wiimote4.Plus

   // Joystick needs to be between  -1 and 1 so we can't use absolute values directly
   if abs(Cursor4.CursorPosX - var.Wiimote4.X) > var.Wiimote4.Deadzone then
      ppjoy4.Analog0 = (var.Wiimote4.X - (Screen.DesktopWidth /2)) * var.Wiimote4.ScaleX / (Screen.DesktopWidth / 2)
   endif

   if abs(Cursor4.CursorPosY - var.Wiimote4.Y) > var.Wiimote4.Deadzone then
     ppjoy4.Analog1 = (var.Wiimote4.Y - (Screen.DesktopHeight /2)) * var.Wiimote4.ScaleY / (Screen.DesktopHeight / 2)
   endif
endif
